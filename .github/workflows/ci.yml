name: CI

on:
  pull_request:
  push:
    branches: [main]

# Ensure we don't run duplicate workflows on the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  analyze_changes:
    runs-on: ubuntu-latest
    outputs:
      api_changes: ${{ steps.filter.outputs.api }}
      metrics_changes: ${{ steps.filter.outputs.metrics }}
      dependency_changes: ${{ steps.filter.outputs.dependencies }}
      has_labels: ${{ steps.determine-labels.outputs.has_labels }}
      labels: ${{ steps.determine-labels.outputs.labels }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Needed for git history and better file change detection

      - name: Filter changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'src/api/**'
            metrics:
              - 'src/core/metrics/**'
            docs:
              - '**/*.md'
              - '**/*.txt'
              - '**/*.mermaid'
              - 'docs/**'
            dependencies:
              - 'poetry.lock'
              - 'pyproject.toml'
            actions:
              - '.github/workflows/**'
              - '.github/dependabot.yml'

      - name: Determine labels based on changes
        id: determine-labels
        run: |
          # Create empty array to store labels
          declare -a LABELS=()

          if [[ "${{ steps.filter.outputs.api }}" == "true" ]]; then
            LABELS+=("api")
          fi

          if [[ "${{ steps.filter.outputs.metrics }}" == "true" ]]; then
            LABELS+=("metrics")
          fi

          if [[ "${{ steps.filter.outputs.docs }}" == "true" ]]; then
            LABELS+=("documentation")
          fi

          if [[ "${{ steps.filter.outputs.dependencies }}" == "true" ]]; then
            LABELS+=("dependencies")
          fi

          if [[ "${{ steps.filter.outputs.actions }}" == "true" ]]; then
            LABELS+=("github_actions")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq 'Add|add|create|Create'; then
            LABELS+=("enhancement")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq '\bfix(|es|ed|ing)\b'; then
            LABELS+=("bug")
          fi

          if git log --pretty=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -Eiq 'refactor|Refactor|Update|update'; then
            LABELS+=("refactor")
          fi

          if [[ "${{ github.head_ref }}" == release-* ]]; then
            LABELS+=("release")
          fi

          # Check if we have any labels
          if [ ${#LABELS[@]} -eq 0 ]; then
            echo "has_labels=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Use newline delimiter for multiline output
          delimiter="$(openssl rand -hex 8)"
          echo "has_labels=true" >> $GITHUB_OUTPUT
          echo "labels<<$delimiter" >> $GITHUB_OUTPUT
          for label in "${LABELS[@]}"; do
            echo "$label" >> $GITHUB_OUTPUT
          done
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Add Labels to PR
        if: github.event_name == 'pull_request' && steps.determine-labels.outputs.has_labels == 'true'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = `${{ steps.determine-labels.outputs.labels }}`.trim().split('\n');
              
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

  pyright:
    runs-on: ubuntu-latest
    needs: analyze_changes
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --extras "all"
      - name: Run Pyright
        run: make check

  pylint:
    runs-on: ubuntu-latest
    needs: analyze_changes
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --extras "all"
      - name: Run pylint
        run: make lint

  pytest:
    runs-on: ubuntu-latest
    needs: analyze_changes
    env:
      API_KEY: your-secret-api-key-here
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: poetry install --extras "all"
      - name: Run pytest
        run: make test

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pyright, pylint, pytest]

    if: startsWith(github.head_ref, 'release-') && success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog and Version
        run: |
          # Generate changelog
          LATEST_TAG=$(git describe --tags --abbrev=0)
          CHANGELOG=$(git log "${LATEST_TAG}..HEAD" --pretty=format:"- %s (%h) by %an")

          if [ -n "$CHANGELOG" ]; then
            echo "## Changelog" > CHANGELOG.md
            echo "### From $LATEST_TAG to HEAD" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "$CHANGELOG" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Determine version
          CURRENT_VERSION=$(cat VERSION 2>/dev/null || echo "0.0.0")
          COMMITS=$(git log "v${CURRENT_VERSION}..HEAD" --pretty=format:"%s")

          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          if echo "$COMMITS" | grep -qi '\(breaking\|major\)'; then
            major=$((major + 1))
            minor=0
            patch=0
          elif echo "$COMMITS" | grep -qi '\(feature\|minor\)'; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_VERSION="${major}.${minor}.${patch}"
          echo "$NEW_VERSION" > VERSION
          echo "Version bumped to: $NEW_VERSION"

      - name: Commit Changelog and Version Updates
        run: |
          TAG_NAME="v$(cat VERSION)"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md VERSION
          git commit -m "Release $TAG_NAME"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          git push origin ${{ github.head_ref }}

      - name: Read Changelog
        id: read_changelog
        run: |
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          cat CHANGELOG.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: |
            ${{ env.CHANGELOG_CONTENT }}
          draft: false
          prerelease: false
